name: Python application

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install firebase-admin  # Ensure firebase-admin is installed

    - name: Print Firebase credentials secret
      # Print the content of the secret for debugging
      run: |
        echo "${{ secrets.FIREBASE_CRED_PATH }}"
      shell: bash

    - name: Write Firebase credentials to file
      # Write the JSON content from the secret to a file
      run: |
        echo "${{ secrets.FIREBASE_CRED_PATH }}" > firebase-service-account.json
        cat firebase-service-account.json  # Print to ensure it's written correctly
      shell: bash

    - name: Export Firebase environment variables
      # Set the environment variables for the database URL and credentials path
      run: |
        echo "FIREBASE_CRED_PATH=$(pwd)/firebase-service-account.json" >> $GITHUB_ENV
        echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}" >> $GITHUB_ENV
      shell: bash

    - name: Validate Firebase JSON content
      run: |
        python -c "
        import os, json
        path = os.getenv('FIREBASE_CRED_PATH')
        if not path:
            raise ValueError('FIREBASE_CRED_PATH is not set')
        print(f'Reading from: {path}')
        try:
            with open(path, 'r') as f:
                data = json.load(f)
                print('JSON data is valid and contains:', data)
        except json.JSONDecodeError as e:
            print(f'Failed to decode JSON: {e}')
            exit(1)
        except FileNotFoundError as fnfe:
            print(f'File not found: {fnfe}')
            exit(1)
        except Exception as ex:
            print(f'An error occurred: {ex}')
            exit(1)
        "

    - name: Check formatting with black
      run: |
        pip install black
        black .

    - name: Test with pytest
      env:
        FIREBASE_CRED_PATH: ${{ env.FIREBASE_CRED_PATH }}
        FIREBASE_DATABASE_URL: ${{ env.FIREBASE_DATABASE_URL }}
      run: |
        pip install pytest
        pytest --tb=short -v
